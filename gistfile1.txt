# Initial backend architecture using FastAPI for https://qumm.ltd
# This version uses SQLAlchemy and PostgreSQL for persistence.

from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from pydantic import BaseModel
from sqlalchemy import Column, Integer, String, Float, Boolean, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from uuid import uuid4
from typing import List, Optional
from passlib.context import CryptContext
from datetime import datetime, timedelta
import jwt
import os
import sys

# --- SSL Workaround for Limited Environments ---
try:
    import ssl
except ModuleNotFoundError:
    ssl = None
    sys.modules['ssl'] = None

# --- Database Setup ---
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./qumm.db")
connect_args = {"check_same_thread": False} if "sqlite" in DATABASE_URL else {}
engine = create_engine(DATABASE_URL, connect_args=connect_args)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# --- FastAPI App Init ---
app = FastAPI(title="QUMM Real Estate Platform")

# --- Security Setup ---
SECRET_KEY = "your-secret-key"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")

# --- SQLAlchemy Models ---
class PropertyModel(Base):
    __tablename__ = "properties"
    id = Column(String, primary_key=True, index=True)
    title = Column(String)
    description = Column(String)
    price = Column(Float)
    location = Column(String)
    type = Column(String)
    is_rent = Column(Boolean)

class ServiceBookingModel(Base):
    __tablename__ = "service_bookings"
    id = Column(String, primary_key=True, index=True)
    service_type = Column(String)
    customer_name = Column(String)
    address = Column(String)
    date = Column(String)
    time = Column(String)
    status = Column(String, default="pending")

class UserModel(Base):
    __tablename__ = "users"
    id = Column(String, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    hashed_password = Column(String)

Base.metadata.create_all(bind=engine)

# --- Dependency Injection ---
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# --- Auth Utility Functions ---
def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=15))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise HTTPException(status_code=401, detail="Invalid token")
        user = db.query(UserModel).filter(UserModel.username == username).first()
        if user is None:
            raise HTTPException(status_code=404, detail="User not found")
        return user
    except jwt.PyJWTError:
        raise HTTPException(status_code=403, detail="Token validation error")

# --- Pydantic Schemas ---
class Property(BaseModel):
    id: str
    title: str
    description: str
    price: float
    location: str
    type: str
    is_rent: bool

class ServiceBooking(BaseModel):
    id: str
    service_type: str
    customer_name: str
    address: str
    date: str
    time: str
    status: str = "pending"

class UserCreate(BaseModel):
    username: str
    password: str

class Token(BaseModel):
    access_token: str
    token_type: str

# --- Auth Routes ---
@app.post("/auth/register")
def register(user: UserCreate, db: Session = Depends(get_db)):
    hashed_password = get_password_hash(user.password)
    db_user = UserModel(id=str(uuid4()), username=user.username, hashed_password=hashed_password)
    db.add(db_user)
    db.commit()
    return {"message": "User registered successfully"}

@app.post("/auth/login", response_model=Token)
def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = db.query(UserModel).filter(UserModel.username == form_data.username).first()
    if not user or not verify_password(form_data.password, user.hashed_password):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Incorrect username or password")
    access_token = create_access_token(data={"sub": user.username}, expires_delta=timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    return {"access_token": access_token, "token_type": "bearer"}

# --- Real Estate Routes ---
@app.post("/properties/", response_model=Property)
def add_property(property: Property, db: Session = Depends(get_db), user: UserModel = Depends(get_current_user)):
    db_property = PropertyModel(**property.dict())
    db.add(db_property)
    db.commit()
    db.refresh(db_property)
    return db_property

@app.get("/properties/", response_model=List[Property])
def get_properties(db: Session = Depends(get_db)):
    return db.query(PropertyModel).all()

@app.get("/properties/{property_id}", response_model=Property)
def get_property(property_id: str, db: Session = Depends(get_db)):
    prop = db.query(PropertyModel).filter(PropertyModel.id == property_id).first()
    if not prop:
        raise HTTPException(status_code=404, detail="Property not found")
    return prop

# --- Service Booking Routes ---
@app.post("/services/book/", response_model=ServiceBooking)
def book_service(booking: ServiceBooking, db: Session = Depends(get_db)):
    db_booking = ServiceBookingModel(**booking.dict())
    db.add(db_booking)
    db.commit()
    db.refresh(db_booking)
    return db_booking

@app.get("/services/bookings/", response_model=List[ServiceBooking])
def list_bookings(db: Session = Depends(get_db)):
    return db.query(ServiceBookingModel).all()

@app.get("/services/bookings/{booking_id}", response_model=ServiceBooking)
def get_booking(booking_id: str, db: Session = Depends(get_db)):
    b = db.query(ServiceBookingModel).filter(ServiceBookingModel.id == booking_id).first()
    if not b:
        raise HTTPException(status_code=404, detail="Booking not found")
    return b

# --- Additional Test Case Route ---
@app.get("/health")
def health_check():
    return {"status": "ok"}
